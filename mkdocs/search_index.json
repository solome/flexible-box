{
    "docs": [
        {
            "location": "/", 
            "text": "Resources List\n\n\nCSS Flexible Box\n\n\n\n\nhttps://www.w3.org/TR/css-flexbox/\n\n\nFlexbugs", 
            "title": "Home"
        }, 
        {
            "location": "/#resources-list", 
            "text": "CSS Flexible Box   https://www.w3.org/TR/css-flexbox/  Flexbugs", 
            "title": "Resources List"
        }, 
        {
            "location": "/flex-introduction/", 
            "text": "Flexible Box\n\n\n\n\nIn the flexible box layout model, the children of a flex container can be laid out in any direction, and can \u201cflex\u201d their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions.  \n\n\n\n\nOverview\n\n\nIntroduction\n\n\nCSS 2.1\n defined four layout modes \u2014 algorithms which determine the size and position of boxes based on their relationships with their sibling and ancestor boxes:\n\n\n\n\nblock layout\n, designed for laying out documents\n\n\ninline layout\n, designed for laying out text\n\n\ntable layout\n, designed for laying out 2D data in a tabular format\n\n\npositioned layout\n, designed for very explicit positioning without much regard for other elements in the document\n\n\n\n\nThis module introduces a new layout mode, flex layout, which is designed for laying out more complex applications and webpages.\n\n\nOverView\n\n\nFlex layout is superficially similar to block layout. It lacks many of the more complex text- or document-centric properties that can be used in block layout, such as floats and columns. In return it gains simple and powerful tools for distributing space and aligning content in ways that web apps and complex web pages often need. The contents of a flex container:\n\n\n\n\ncan be laid out in any flow direction (leftwards, rightwards, downwards, or even upwards!)\n\n\ncan have their display order reversed or rearranged at the style layer (i.e., visual order can be independent of source and speech order)\n\n\ncan be laid out linearly along a single (main) axis or wrapped into multiple lines along a secondary (cross) axis\n\n\ncan \u201cflex\u201d their sizes to respond to the available space\n\n\ncan be aligned with respect to their container or each other on the secondary (cross)\n\n\ncan be dynamically collapsed or uncollapsed along the main axis while preserving the container\u2019s cross size\n\n\n\n\n\n  \nHere\u2019s an example of a catalog where each item has a title, a photo, a description, and a purchase button. The designer\u2019s intention is that each entry has the same overall size, that the photo be above the text, and that the purchase buttons aligned at the bottom, regardless of the length of the item\u2019s description.\n\n\n  \n\n\n\n\n\nModule interactions\n\n\nThis module extends the definition of the display property [CSS21], adding a new block-level and new inline-level display type, and defining a new type of formatting context along with properties to control its layout. None of the properties defined in this module apply to the ::first-line or ::first-letter pseudo-elements.\n\n\nFlex Layout Box Model and Terminology\n\n\nA flex container is the box generated by an element with a computed \ndisplay\n of \nflex\n or \ninline-flex\n. In-flow children of a flex container are called flex items and are laid out using the flex layout model.\n\n\n\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\ndisplay\n\u5c5e\u6027\u7684\u503c\u6765\u5c06\u4e00\u4e2a\u5bb9\u5668\u6307\u5b9a\u4e3aFlexbox\u5e03\u5c40\uff1a\n\n\n.container {\n  ...\n\n  display: flex; /* \u884c\u5185\u5143\u7d20\u8bbe\u7f6e\u4e3a inline-flex */\n\n  ...\n}\n\n\n\n\n\n\n\n\u4e00\u65e6\u5c06\u5bb9\u5668\u8bbe\u7f6e\u4e3aFlexbox\u5e03\u5c40\u4e4b\u540e\uff0c\u5b50\u5143\u7d20\nfloat\n\u3001\nclear\n\u53ca\nvertical-align\n\u5c5e\u6027\u5c06\u5931\u6548\u3002\n\n\n\n\n\u91c7\u7528Flex\u5e03\u5c40\u7684\u5143\u7d20\uff0c\u79f0\u4e3aFlex\u5bb9\u5668\uff08flex container\uff09\uff0c\u7b80\u79f0\"\u5bb9\u5668\"\u3002\u5b83\u7684\u6240\u6709\u5b50\u5143\u7d20\u81ea\u52a8\u6210\u4e3a\u5bb9\u5668\u6210\u5458\uff0c\u79f0\u4e3aFlex\u9879\u76ee\uff08flex item\uff09\uff0c\u7b80\u79f0\"\u9879\u76ee\"\u3002\n\n\nBasic Concept\n\n\nUnlike block and inline layout, whose layout calculations are biased to the block and inline flow directions, flex layout is biased to the flex directions. To make it easier to talk about flex layout, this section defines a set of flex flow\u2013relative terms. The flex-flow value and the writing mode determine how these terms map to physical directions (top/right/bottom/left), axes (vertical/horizontal), and sizes (width/height).\n\n\n\n  \n\n  \n An illustration of the various directions and sizing terms as applied to a row flex container.\n\n\n\n\n\n\n\n\n\nmain axis\n \n \nmain dimension\n\nThe main axis of a flex container is the primary axis along which flex items are laid out. It extends in the main dimension.\n\n\n\n\n\n\nmain-start\n \n \nmain-end\n\nThe flex items are placed within the container starting on the main-start side and going toward the main-end side.\n\n\n\n\n\n\nmain size\n \n \nmain size property\n\nA flex item\u2019s width or height, whichever is in the main dimension, is the item\u2019s main size. The flex item\u2019s main size property is either the width or height property, whichever is in the main dimension.\n\n\n\n\n\n\ncross axis\n \n \ncross dimension\n\nThe axis perpendicular to the main axis is called the cross axis. It extends in the cross dimension.\n\n\n\n\n\n\ncross-start\n \n \ncross-end\n\nFlex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.\n\n\n\n\n\n\ncross size\n \n \ncorss size property\n\nhe width or height of a flex item, whichever is in the cross dimension, is the item\u2019s cross size. The cross size property is whichever of width or height that is in the cross dimension.\n\n\n\n\n\n\nFlex \u5bb9\u5668\u9ed8\u8a8d\u5b58\u5728\u5169\u6839\u8ef8\uff1a\u5f9e\u5de6\u5f80\u53f3\u6c34\u5e73\u65b9\u5411\u7684\u4e3b\u8ef8\uff08main axis\uff09\u548c\u5f9e\u4e0a\u5f80\u4e0b\u8c4e\u76f4\u65b9\u5411\u7684\u4ea4\u53c9\u8ef8\uff08cross axis\uff09\u3002\n\n\n\u4e3b\u8ef8\u958b\u59cb\u7684\u4f4d\u7f6e\u53eb\u505a \nmain start\n\uff0c\u7d50\u675f\u7684\u4f4d\u7f6e\u53eb\u505a \nmain end\n\uff1b\u4ea4\u53c9\u8ef8\u958b\u59cb\u7684\u4f4d\u7f6e\u53eb\u505a \ncross start\n\uff0c\u7d50\u675f\u7684\u4f4d\u7f6e\u53eb\u505a \ncross end\n\u3002\n\n\nFlex\u9805\u76ee\u9ed8\u8a8d\u6cbf\u4e3b\u8ef8\u65b9\u5411\u6392\u5217\u3002\u55ae\u500b\u9805\u76ee\u4f54\u64da\u7684\u4e3b\u8ef8\u7a7a\u9593\u53eb\u505a \nmain size\n\uff0c\u4f54\u64da\u7684\u4ea4\u53c9\u8ef8\u7a7a\u9593\u53eb\u505a \ncross size\n\u3002\n\n\nFlex Containers: the flex and inline-flex display values\n\n\nA flex container establishes a new flex formatting context for its contents. This is the same as establishing a block formatting context, except that flex layout is used instead of block layout. For example, floats do not intrude into the flex container, and the flex container\u2019s margins do not collapse with the margins of its contents. Flex containers form a containing block for their contents exactly like block containers do. [CSS21] The overflow property applies to flex containers.\n\n\nFlex containers are not block containers, and so some properties that were designed with the assumption of block layout don\u2019t apply in the context of flex layout. In particular:\n\n\n\n\nthe column-* properties in the Multi-column Layout module [CSS3COL] have no effect on a flex container.\n\n\nfloat and clear do not create floating or clearance of flex item, and do not take it out-of-flow.\n\n\nvertical-align has no effect on a flex item.\n\n\nthe ::first-line and ::first-letter pseudo-elements do not apply to flex containers, and flex containers do not contribute a first formatted line or first letter to their ancestors.\n\n\n\n\nIf an element\u2019s specified display is inline-flex, then its display property computes to flex in certain circumstances: the table in CSS 2.1 Section 9.7 is amended to contain an additional row, with inline-flex in the \"Specified Value\" column and flex in the \"Computed Value\" column.\n\n\nFlex Items\n\n\n\n\nsee \nflex items\n.\n\n\n\n\nAbsolutely-Positioned Flex Children\n\n\nFlex Item Margins and Paddings\n\n\nFlex Item Z-Ordering\n\n\nCollapsed Items\n\n\nImplied Minimum Size of Flex Items\n\n\nOrdering and Orientation\n\n\nFlex Flow Direction: the flex-direction property\n\n\nFlex Line Wrapping: the flex-wrap property\n\n\nFlex Direction and Wrap: the flex-flow shorthand\n\n\nDisplay Order: the order property", 
            "title": "Introduction"
        }, 
        {
            "location": "/flex-introduction/#flexible-box", 
            "text": "In the flexible box layout model, the children of a flex container can be laid out in any direction, and can \u201cflex\u201d their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions.     Overview", 
            "title": "Flexible Box"
        }, 
        {
            "location": "/flex-introduction/#introduction", 
            "text": "CSS 2.1  defined four layout modes \u2014 algorithms which determine the size and position of boxes based on their relationships with their sibling and ancestor boxes:   block layout , designed for laying out documents  inline layout , designed for laying out text  table layout , designed for laying out 2D data in a tabular format  positioned layout , designed for very explicit positioning without much regard for other elements in the document   This module introduces a new layout mode, flex layout, which is designed for laying out more complex applications and webpages.  OverView  Flex layout is superficially similar to block layout. It lacks many of the more complex text- or document-centric properties that can be used in block layout, such as floats and columns. In return it gains simple and powerful tools for distributing space and aligning content in ways that web apps and complex web pages often need. The contents of a flex container:   can be laid out in any flow direction (leftwards, rightwards, downwards, or even upwards!)  can have their display order reversed or rearranged at the style layer (i.e., visual order can be independent of source and speech order)  can be laid out linearly along a single (main) axis or wrapped into multiple lines along a secondary (cross) axis  can \u201cflex\u201d their sizes to respond to the available space  can be aligned with respect to their container or each other on the secondary (cross)  can be dynamically collapsed or uncollapsed along the main axis while preserving the container\u2019s cross size   \n   Here\u2019s an example of a catalog where each item has a title, a photo, a description, and a purchase button. The designer\u2019s intention is that each entry has the same overall size, that the photo be above the text, and that the purchase buttons aligned at the bottom, regardless of the length of the item\u2019s description. \n\n     Module interactions  This module extends the definition of the display property [CSS21], adding a new block-level and new inline-level display type, and defining a new type of formatting context along with properties to control its layout. None of the properties defined in this module apply to the ::first-line or ::first-letter pseudo-elements.", 
            "title": "Introduction"
        }, 
        {
            "location": "/flex-introduction/#flex-layout-box-model-and-terminology", 
            "text": "A flex container is the box generated by an element with a computed  display  of  flex  or  inline-flex . In-flow children of a flex container are called flex items and are laid out using the flex layout model.  \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e display \u5c5e\u6027\u7684\u503c\u6765\u5c06\u4e00\u4e2a\u5bb9\u5668\u6307\u5b9a\u4e3aFlexbox\u5e03\u5c40\uff1a  .container {\n  ...\n\n  display: flex; /* \u884c\u5185\u5143\u7d20\u8bbe\u7f6e\u4e3a inline-flex */\n\n  ...\n}   \n\u4e00\u65e6\u5c06\u5bb9\u5668\u8bbe\u7f6e\u4e3aFlexbox\u5e03\u5c40\u4e4b\u540e\uff0c\u5b50\u5143\u7d20 float \u3001 clear \u53ca vertical-align \u5c5e\u6027\u5c06\u5931\u6548\u3002   \u91c7\u7528Flex\u5e03\u5c40\u7684\u5143\u7d20\uff0c\u79f0\u4e3aFlex\u5bb9\u5668\uff08flex container\uff09\uff0c\u7b80\u79f0\"\u5bb9\u5668\"\u3002\u5b83\u7684\u6240\u6709\u5b50\u5143\u7d20\u81ea\u52a8\u6210\u4e3a\u5bb9\u5668\u6210\u5458\uff0c\u79f0\u4e3aFlex\u9879\u76ee\uff08flex item\uff09\uff0c\u7b80\u79f0\"\u9879\u76ee\"\u3002  Basic Concept  Unlike block and inline layout, whose layout calculations are biased to the block and inline flow directions, flex layout is biased to the flex directions. To make it easier to talk about flex layout, this section defines a set of flex flow\u2013relative terms. The flex-flow value and the writing mode determine how these terms map to physical directions (top/right/bottom/left), axes (vertical/horizontal), and sizes (width/height).  \n   \n    An illustration of the various directions and sizing terms as applied to a row flex container.     main axis     main dimension \nThe main axis of a flex container is the primary axis along which flex items are laid out. It extends in the main dimension.    main-start     main-end \nThe flex items are placed within the container starting on the main-start side and going toward the main-end side.    main size     main size property \nA flex item\u2019s width or height, whichever is in the main dimension, is the item\u2019s main size. The flex item\u2019s main size property is either the width or height property, whichever is in the main dimension.    cross axis     cross dimension \nThe axis perpendicular to the main axis is called the cross axis. It extends in the cross dimension.    cross-start     cross-end \nFlex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.    cross size     corss size property \nhe width or height of a flex item, whichever is in the cross dimension, is the item\u2019s cross size. The cross size property is whichever of width or height that is in the cross dimension.    Flex \u5bb9\u5668\u9ed8\u8a8d\u5b58\u5728\u5169\u6839\u8ef8\uff1a\u5f9e\u5de6\u5f80\u53f3\u6c34\u5e73\u65b9\u5411\u7684\u4e3b\u8ef8\uff08main axis\uff09\u548c\u5f9e\u4e0a\u5f80\u4e0b\u8c4e\u76f4\u65b9\u5411\u7684\u4ea4\u53c9\u8ef8\uff08cross axis\uff09\u3002  \u4e3b\u8ef8\u958b\u59cb\u7684\u4f4d\u7f6e\u53eb\u505a  main start \uff0c\u7d50\u675f\u7684\u4f4d\u7f6e\u53eb\u505a  main end \uff1b\u4ea4\u53c9\u8ef8\u958b\u59cb\u7684\u4f4d\u7f6e\u53eb\u505a  cross start \uff0c\u7d50\u675f\u7684\u4f4d\u7f6e\u53eb\u505a  cross end \u3002  Flex\u9805\u76ee\u9ed8\u8a8d\u6cbf\u4e3b\u8ef8\u65b9\u5411\u6392\u5217\u3002\u55ae\u500b\u9805\u76ee\u4f54\u64da\u7684\u4e3b\u8ef8\u7a7a\u9593\u53eb\u505a  main size \uff0c\u4f54\u64da\u7684\u4ea4\u53c9\u8ef8\u7a7a\u9593\u53eb\u505a  cross size \u3002", 
            "title": "Flex Layout Box Model and Terminology"
        }, 
        {
            "location": "/flex-introduction/#flex-containers-the-flex-and-inline-flex-display-values", 
            "text": "A flex container establishes a new flex formatting context for its contents. This is the same as establishing a block formatting context, except that flex layout is used instead of block layout. For example, floats do not intrude into the flex container, and the flex container\u2019s margins do not collapse with the margins of its contents. Flex containers form a containing block for their contents exactly like block containers do. [CSS21] The overflow property applies to flex containers.  Flex containers are not block containers, and so some properties that were designed with the assumption of block layout don\u2019t apply in the context of flex layout. In particular:   the column-* properties in the Multi-column Layout module [CSS3COL] have no effect on a flex container.  float and clear do not create floating or clearance of flex item, and do not take it out-of-flow.  vertical-align has no effect on a flex item.  the ::first-line and ::first-letter pseudo-elements do not apply to flex containers, and flex containers do not contribute a first formatted line or first letter to their ancestors.   If an element\u2019s specified display is inline-flex, then its display property computes to flex in certain circumstances: the table in CSS 2.1 Section 9.7 is amended to contain an additional row, with inline-flex in the \"Specified Value\" column and flex in the \"Computed Value\" column.", 
            "title": "Flex Containers: the flex and inline-flex display values"
        }, 
        {
            "location": "/flex-introduction/#flex-items", 
            "text": "see  flex items .   Absolutely-Positioned Flex Children  Flex Item Margins and Paddings  Flex Item Z-Ordering  Collapsed Items  Implied Minimum Size of Flex Items", 
            "title": "Flex Items"
        }, 
        {
            "location": "/flex-introduction/#ordering-and-orientation", 
            "text": "Flex Flow Direction: the flex-direction property  Flex Line Wrapping: the flex-wrap property  Flex Direction and Wrap: the flex-flow shorthand  Display Order: the order property", 
            "title": "Ordering and Orientation"
        }, 
        {
            "location": "/flex-containers/", 
            "text": "", 
            "title": "Flex Containers"
        }, 
        {
            "location": "/flex-items/", 
            "text": "", 
            "title": "Flex Items"
        }, 
        {
            "location": "/flex-examples/", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/rn-layout-system/", 
            "text": "", 
            "title": "React Native Layout System"
        }
    ]
}