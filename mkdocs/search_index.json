{
    "docs": [
        {
            "location": "/", 
            "text": "Resources List\n\n\nCSS Flexible Box\n\n\n\n\nhttps://www.w3.org/TR/css-flexbox/", 
            "title": "Home"
        }, 
        {
            "location": "/#resources-list", 
            "text": "CSS Flexible Box   https://www.w3.org/TR/css-flexbox/", 
            "title": "Resources List"
        }, 
        {
            "location": "/flex-introduction/", 
            "text": "Flexible Box\n\n\n\n\nIn the flexible box layout model, the children of a flex container can be laid out in any direction, and can \u201cflex\u201d their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions.  \n\n\n\n\nOverview\n\n\nIntroduction\n\n\nCSS 2.1\n defined four layout modes \u2014 algorithms which determine the size and position of boxes based on their relationships with their sibling and ancestor boxes:\n\n\n\n\nblock layout\n, designed for laying out documents\n\n\ninline layout\n, designed for laying out text\n\n\ntable layout\n, designed for laying out 2D data in a tabular format\n\n\npositioned layout\n, designed for very explicit positioning without much regard for other elements in the document\n\n\n\n\nThis module introduces a new layout mode, flex layout, which is designed for laying out more complex applications and webpages.\n\n\nTerminology\n\n\nA flex container is the box generated by an element with a computed display of flex or inline-flex. In-flow children of a flex container are called flex items and are laid out using the flex layout model.\n\n\n\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\ndisplay\n\u5c5e\u6027\u7684\u503c\u6765\u5c06\u4e00\u4e2a\u5bb9\u5668\u6307\u5b9a\u4e3aFlexbox\u5e03\u5c40\uff1a\n\n\n.container {\n  ...\n\n  display: flex; /* \u884c\u5185\u5143\u7d20\u8bbe\u7f6e\u4e3a inline-flex */\n\n  ...\n}\n\n\n\n\n\n\n\n\u4e00\u65e6\u5c06\u5bb9\u5668\u8bbe\u7f6e\u4e3aFlexbox\u5e03\u5c40\u4e4b\u540e\uff0c\u5b50\u5143\u7d20\nfloat\n\u3001\nclear\n\u53ca\nvertical-align\n\u5c5e\u6027\u5c06\u5931\u6548\u3002\n\n\n\n\n\u91c7\u7528Flex\u5e03\u5c40\u7684\u5143\u7d20\uff0c\u79f0\u4e3aFlex\u5bb9\u5668\uff08flex container\uff09\uff0c\u7b80\u79f0\"\u5bb9\u5668\"\u3002\u5b83\u7684\u6240\u6709\u5b50\u5143\u7d20\u81ea\u52a8\u6210\u4e3a\u5bb9\u5668\u6210\u5458\uff0c\u79f0\u4e3aFlex\u9879\u76ee\uff08flex item\uff09\uff0c\u7b80\u79f0\"\u9879\u76ee\"\u3002\n\n\nBasic Concept\n\n\nUnlike block and inline layout, whose layout calculations are biased to the block and inline flow directions, flex layout is biased to the flex directions. To make it easier to talk about flex layout, this section defines a set of flex flow\u2013relative terms. The flex-flow value and the writing mode determine how these terms map to physical directions (top/right/bottom/left), axes (vertical/horizontal), and sizes (width/height).\n\n\nmain axis \n main dimension\n\n\nmain-start \n main-end\n\n\nmain size \n main size property\n\n\ncross axis \n cross dimension\n\n\ncross-start \n cross-end\n\n\ncross size \n corss size property\n\n\nFlex Containers\n\n\n\n\nsee \nflex container\n.\n\n\n\n\nFlex Items\n\n\n\n\nsee \nflex items\n.", 
            "title": "Introduction"
        }, 
        {
            "location": "/flex-introduction/#flexible-box", 
            "text": "In the flexible box layout model, the children of a flex container can be laid out in any direction, and can \u201cflex\u201d their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions.     Overview", 
            "title": "Flexible Box"
        }, 
        {
            "location": "/flex-introduction/#introduction", 
            "text": "CSS 2.1  defined four layout modes \u2014 algorithms which determine the size and position of boxes based on their relationships with their sibling and ancestor boxes:   block layout , designed for laying out documents  inline layout , designed for laying out text  table layout , designed for laying out 2D data in a tabular format  positioned layout , designed for very explicit positioning without much regard for other elements in the document   This module introduces a new layout mode, flex layout, which is designed for laying out more complex applications and webpages.", 
            "title": "Introduction"
        }, 
        {
            "location": "/flex-introduction/#terminology", 
            "text": "A flex container is the box generated by an element with a computed display of flex or inline-flex. In-flow children of a flex container are called flex items and are laid out using the flex layout model.  \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e display \u5c5e\u6027\u7684\u503c\u6765\u5c06\u4e00\u4e2a\u5bb9\u5668\u6307\u5b9a\u4e3aFlexbox\u5e03\u5c40\uff1a  .container {\n  ...\n\n  display: flex; /* \u884c\u5185\u5143\u7d20\u8bbe\u7f6e\u4e3a inline-flex */\n\n  ...\n}   \n\u4e00\u65e6\u5c06\u5bb9\u5668\u8bbe\u7f6e\u4e3aFlexbox\u5e03\u5c40\u4e4b\u540e\uff0c\u5b50\u5143\u7d20 float \u3001 clear \u53ca vertical-align \u5c5e\u6027\u5c06\u5931\u6548\u3002   \u91c7\u7528Flex\u5e03\u5c40\u7684\u5143\u7d20\uff0c\u79f0\u4e3aFlex\u5bb9\u5668\uff08flex container\uff09\uff0c\u7b80\u79f0\"\u5bb9\u5668\"\u3002\u5b83\u7684\u6240\u6709\u5b50\u5143\u7d20\u81ea\u52a8\u6210\u4e3a\u5bb9\u5668\u6210\u5458\uff0c\u79f0\u4e3aFlex\u9879\u76ee\uff08flex item\uff09\uff0c\u7b80\u79f0\"\u9879\u76ee\"\u3002  Basic Concept  Unlike block and inline layout, whose layout calculations are biased to the block and inline flow directions, flex layout is biased to the flex directions. To make it easier to talk about flex layout, this section defines a set of flex flow\u2013relative terms. The flex-flow value and the writing mode determine how these terms map to physical directions (top/right/bottom/left), axes (vertical/horizontal), and sizes (width/height).  main axis   main dimension  main-start   main-end  main size   main size property  cross axis   cross dimension  cross-start   cross-end  cross size   corss size property", 
            "title": "Terminology"
        }, 
        {
            "location": "/flex-introduction/#flex-containers", 
            "text": "see  flex container .", 
            "title": "Flex Containers"
        }, 
        {
            "location": "/flex-introduction/#flex-items", 
            "text": "see  flex items .", 
            "title": "Flex Items"
        }, 
        {
            "location": "/flex-containers/", 
            "text": "", 
            "title": "Flex Containers"
        }, 
        {
            "location": "/flex-items/", 
            "text": "", 
            "title": "Flex Items"
        }, 
        {
            "location": "/flex-examples/", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/rn-layout-system/", 
            "text": "", 
            "title": "React Native Layout System"
        }
    ]
}